on:
  push:
    branches:
      - master

name: Release

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      cross-version: 0.2.1
      cross-docker-image: rustembedded/cross:i686-pc-windows-gnu
    outputs:
      version: ${{ steps.version.outputs.CARGO_PKG_VERSION }}

    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/extract-aqtk.sh

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: i686-pc-windows-gnu
      - name: Cache Cross
        id: cache-cross
        uses: actions/cache@v2
        with:
          path: ~/cross
          key: ${{ runner.os }}-cross-${{ env.cross-version }}-${{ env.cross-docker-image }}
      - name: Install Cross
        if: steps.cache-cross.outputs.cache-hit != 'true'
        run: |
          mkdir ~/cross \
          && cargo install --version=${{ env.cross-version }} cross \
          && cp ~/.cargo/bin/cross ~/cross/ \
          && docker pull ${{ env.cross-docker-image }} \
          && docker save -o ~/cross/image.tar ${{ env.cross-docker-image }} \
      - name: Use Cached Cross
        if: steps.cache-cross.outputs.cache-hit == 'true'
        run: |
          cp ~/cross/cross ~/.cargo/bin/ \
          && docker load -i ~/cross/image.tar

      - name: Build
        run: cross build --color=always --target i686-pc-windows-gnu --release

      - name: Get version
        id: version
        run: |
          cargo metadata --format-version=1 --no-deps \
          | jq -r '"::set-output name=CARGO_PKG_VERSION::" + .packages[].version'
      - name: Package
        run: |
          mkdir release && cd release \
          && mv ../target/i686-pc-windows-gnu/release/aquestalk-proxy.exe ./aquestalk-proxy.exe \
          && mv ../aquestalk ./aquestalk \
          && cp ../README.md ./ \
          && cp ../COPYING ./ \
          && zip -r ../aquestalk-proxy_v${{ steps.version.outputs.CARGO_PKG_VERSION }}.zip *
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.CARGO_PKG_VERSION }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            aquestalk-proxy_v${{ steps.version.outputs.CARGO_PKG_VERSION }}.zip

  docker:
    name: Push to Docker Hub
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        id: meta
        with:
          images: nax4/aquestalk-proxy
          tags: |
            type=semver,pattern={{ version }},value=${{ needs.release.outputs.version }}
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.release
          platforms: linux/386
          secrets: |
            GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
